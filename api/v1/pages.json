{"entries":[{"title":"About","url":"/about/","tags":[],"body":"","meta":{"layout":"default","title":"About","permalink":"about/","render":"dynamic"}},{"title":"","url":"/","tags":[],"body":"","meta":{"layout":"default"}},{"title":"Projects","url":"/projects/","tags":[],"body":"","meta":{"layout":"default","title":"Projects","permalink":"projects/","render":"dynamic"}},{"title":"Zdharma Initiative starting up","url":"/posts/Zdharma-Initiative-starting-up","tags":["zdharma"],"body":"I’ve created zdharma.org and multiple Zsh projects because the Zsh language is enough powerfull to support sophisticated and large tasks. Main project is currently ZUI – Zsh User Interface library, that allows to create applications with curses interface in a manner resembling CGI+(D)HTML. It recalls the old term “RAD” – rapid application development. Here is what is sufficient to create hello world application: demo_mod1_generator() { local mod=\"$1\" ice=\"$2\" # Content, no hyper-links reply=( \"Hello World from ${ZUI[YELLOW]}ZUI${ZUI[COLOR_END]}! Module $mod, instance $ice.\" ) # Non-selectable lines Hops to jump with [ and ] Local anchors reply2=( ) reply3=( 1 ) reply4=( ) } Check out full Hello World example code. Other featured project is Zconvey. It allows to send commands between Zsh sessions. Its main use case is to switch your workflow to new project with: cd ~/github/project2 zc-all cd $PWD Check out Zconvey’s home page and Asciinema video there.","meta":{"draft":false,"categories":["overview"],"layout":"post","title":"Zdharma Initiative starting up","date":"2017-03-12 11:29:00 +0100","type":"post","tags":["zdharma"],"slug":"Zdharma-Initiative-starting-up","ext":".markdown","excerpt":"<p>I’ve created zdharma.org and multiple Zsh projects because the Zsh language is enough powerfull\nto support sophisticated and large tasks. Main project is currently <strong>ZUI</strong> – Zsh User Interface\nlibrary, that allows to create applications with curses interface in a manner resembling CGI+(D)HTML.\nIt recalls the old term “RAD” – rapid application development. Here is what is sufficient to create\nhello world application:</p>\n\n"}},{"title":"Overview of available projects","url":"/posts/Overview-of-available-projects","tags":["projects"],"body":"I’ve developed 14 Zsh projects. I see five of them to be at Zdharma mainstream, rest of the projects might get an uplift to fit into Zdharma goals (robust and well working Zsh software) in the future, mainly by use of ZUI curses interface library. One of the projects is a Zsh module, not a plugin: ZUI – CGI+(D)HTML-like RAD user interface library (curses) Zconvey – send commands to other Zsh processes history-search-multi-word – multi-term history searching for Zsh Zplugin – plugin manager with clean fpath and reports zgdbm – rewritten GDBM module, posted to upstream, further developed at Zdharma Remaining good, but not yet revisited and uplifted plugins: Zsh Navigation Tools – curses-based tools, e.g. multi-word history searcher Zsh Editing Workbench – sane, sophisticated command line editing zsh-morpho – terminal screen savers written in pure Zsh Zsh Command Architect – build commands from what’s in history and at prompt Ztrace – record output of commands, reuse it via curses interface Zsnapshot – zsh session restoration zsh-select – selection list written in pure Zsh zprompts – independent themes for Zsh zzcomplete – a completion mechanism that uses manual pages as source","meta":{"draft":false,"categories":["overview"],"layout":"post","title":"Overview of available projects","date":"2017-03-12 18:48:00 +0100","type":"post","tags":["projects"],"slug":"Overview-of-available-projects","ext":".markdown","excerpt":"<p>I’ve developed 14 Zsh projects. I see five of them to be at Zdharma\nmainstream, rest of the projects might get an uplift to fit into Zdharma goals\n(robust and well working Zsh software) in the future, mainly by use of ZUI\ncurses interface library. One of the projects is a Zsh module, not a plugin:</p>\n\n"}},{"title":"ZUI release is near","url":"/posts/ZUI-release-is-near","tags":["projects","zui"],"body":"I’ve implemented almost every needed feature. There were refactoring stage, final-touches stage, even an optimization stage. I will keep on working for at least 2 weeks, to allow an afterthought stage to happen ;). Who knows what else will get possible. Currently implemented: buttons, anchors, list-boxes, text-fields, toggle buttons, timeout callback, state serialization, (D)HTML-like architecture. Check out demo on text-fields and list-boxes. The timeout callback is basically a timer that calls your function every N milliseconds – a configure/make wrapper has been written that way. There are endless possibilities with ZUI.","meta":{"draft":false,"categories":["zui"],"layout":"post","title":"ZUI release is near","date":"2017-03-17 20:52:00 +0100","type":"post","tags":["projects","zui"],"slug":"ZUI-release-is-near","ext":".markdown","excerpt":"<p>I’ve implemented almost every needed feature. There were refactoring stage, final-touches stage,\neven an optimization stage. I will keep on working for at least 2 weeks, to allow an afterthought\nstage to happen ;). Who knows what else will get possible. Currently implemented:</p>\n\n"}},{"title":"Text Editor In 30 Minutes","url":"/posts/Text-Editor-In-30-Minutes","tags":["projects","zui","rad"],"body":"ZUI’s architecture has proven its value. I have only superficially tried to write a text editor in it, and it was elevated in about 30 minutes. Multiple text-fields, one for each line of text from input file – and that’s pretty it. Saving file is a breeze with inline-handlers: -zui_std_rc_button \"bsave\" \"Save\" 'internal=1; print -rl -- \"${lines[@]}\" > $edited_file' The code in apostrophes will be invoked on press of the button. Creating text fields for each line of text from input file is also easy: noglob -zui_std_text_field \"tfield${idx}\" width offset lines[$idx] The noglob causes line[$idx] to be treated as text and not as pattern. So, a hyper-link is created, with backend-variable line[] – which is single entry in array to which we read the whole file. The text editor supports 1000 lines on current Zshells. I have submitted optimizations that make this 6000 lines – they will be rolled out in next Zsh release (5.3.2). Main use case of such text-area is IMO editing of small config file in a deploy tool, where you change only e.g. an IP, and press “Deploy” to run main task. That’s why 1000 lines is enough, and 6000 even better. Check out recorded demo of this text editor.","meta":{"draft":false,"categories":["zui"],"layout":"post","title":"Text Editor In 30 Minutes","date":"2017-03-19 15:36:00 +0100","type":"post","tags":["projects","zui","rad"],"slug":"Text-Editor-In-30-Minutes","ext":".markdown","excerpt":"<p>ZUI’s architecture has proven its value. I have only superficially tried to write a text editor in it, and it was\nelevated in about 30 minutes. Multiple text-fields, one for each line of text from input file – and that’s pretty it.\nSaving file is a breeze with inline-handlers:</p>\n\n"}},{"title":"Fast-Syntax-Highlighting Released","url":"/posts/Fast-Syntax-Highlighting-Released","tags":["projects","syntax-highlighting","colorizing"],"body":"I have released a plugin that is a highly optimized version Zsh-Syntax-Highlighting project. Overall 60 optimizing commits have been shipped, and the result is that zed/vared can edit functions that have 10 kB of text in their body. Also, multiple syntax-recognition upgrades are being shipped: Variable highlighting Colorizing of ${(a)parameter[...]} inside strings (normally only $parameter is colorized) Fixed colorizing of function definition, like abc() { ... } – abc will not be red Fixed colorizing of complex conditions inside [[, like [[ \"$a\" || \"$b\" ]] Closing ]] and ] are highlighted Paths from $CDPATH aren’t colorized unless the command is cd Check out full story at Github project page","meta":{"draft":false,"categories":["syntax-highlighting"],"layout":"post","title":"Fast-Syntax-Highlighting Released","date":"2017-04-10 16:25:00 +0200","type":"post","tags":["projects","syntax-highlighting","colorizing"],"slug":"Fast-Syntax-Highlighting-Released","ext":".markdown","excerpt":"<p>I have released a plugin that is a highly optimized version Zsh-Syntax-Highlighting project. Overall\n<code class=\"highlighter-rouge\">60</code> optimizing commits have been shipped, and the result is that <code class=\"highlighter-rouge\">zed</code>/<code class=\"highlighter-rouge\">vared</code> can edit functions\nthat have <code class=\"highlighter-rouge\">10 kB</code> of text in their body. Also, multiple syntax-recognition upgrades are being\nshipped:</p>\n\n"}}]}