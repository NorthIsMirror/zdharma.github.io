<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zdharma Initiative</title>
    <description>Advanced Zsh projects, e.g. ZUI – DHTML-like curses interface library, Zconvey – Zsh session integration via file locks and sched.
</description>
    <link>http://zdharma.org/</link>
    <atom:link href="http://zdharma.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Jun 2017 09:18:34 +0200</pubDate>
    <lastBuildDate>Thu, 01 Jun 2017 09:18:34 +0200</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>New plugin: Zredis</title>
        <description>&lt;p&gt;I have released a plugin that is a milestone in administration of &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; database.
Database keys are mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;Zsh&lt;/code&gt; variables, the binding allows to read and write
strings, hashes, sets, sorted sets, lists.&lt;/p&gt;

&lt;p&gt;The project is located at &lt;a href=&quot;https://github.com/zdharma/zredis&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 07:30:00 +0200</pubDate>
        <link>http://zdharma.org/posts/New-Plugin-Zredis</link>
        <guid isPermaLink="true">http://zdharma.org/posts/New-Plugin-Zredis</guid>
        
        <category>projects</category>
        
        <category>plugin</category>
        
        <category>zredis</category>
        
        
        <category>plugin</category>
        
      </item>
    
      <item>
        <title>New plugin: Zbrowse</title>
        <description>&lt;p&gt;I have released a plugin that shows current user-defined shell variables in &lt;code class=&quot;highlighter-rouge&quot;&gt;Zsh&lt;/code&gt; using full-screen
textual UI. When coding
a script, testing something in shell, etc. one often does repetitive &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $var&lt;/code&gt; to see result
of a loop, a function, etc. Now just pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-B&lt;/code&gt; suffices, a &lt;code class=&quot;highlighter-rouge&quot;&gt;ZUI&lt;/code&gt; application will start
– the &lt;code class=&quot;highlighter-rouge&quot;&gt;zbrowse&lt;/code&gt;, and nicely list all user-defined (not from e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;zshrc&lt;/code&gt;) parameters (i.e.
variables). One can also show &lt;strong&gt;all&lt;/strong&gt; shell parameters and search them incrementally.&lt;/p&gt;

&lt;p&gt;The project is located at &lt;a href=&quot;https://github.com/zdharma/zbrowse&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 May 2017 04:35:00 +0200</pubDate>
        <link>http://zdharma.org/posts/New-Plugin-Zbrowse</link>
        <guid isPermaLink="true">http://zdharma.org/posts/New-Plugin-Zbrowse</guid>
        
        <category>projects</category>
        
        <category>zui</category>
        
        
        <category>plugin</category>
        
      </item>
    
      <item>
        <title>Fast-Syntax-Highlighting Released</title>
        <description>&lt;p&gt;I have released a plugin that is a highly optimized version of Zsh-Syntax-Highlighting project. Overall
&lt;code class=&quot;highlighter-rouge&quot;&gt;60&lt;/code&gt; optimizing commits have been shipped, and the result is that &lt;code class=&quot;highlighter-rouge&quot;&gt;zed&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;vared&lt;/code&gt; can edit functions
that have &lt;code class=&quot;highlighter-rouge&quot;&gt;10 kB&lt;/code&gt; of text in their body. Also, multiple syntax-recognition upgrades are being
shipped:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Variable highlighting&lt;/li&gt;
  &lt;li&gt;Colorizing of &lt;code class=&quot;highlighter-rouge&quot;&gt;${(a)parameter[...]}&lt;/code&gt; inside strings (normally only &lt;code class=&quot;highlighter-rouge&quot;&gt;$parameter&lt;/code&gt; is colorized)&lt;/li&gt;
  &lt;li&gt;Fixed colorizing of function definition, like &lt;code class=&quot;highlighter-rouge&quot;&gt;abc() { ... }&lt;/code&gt; – &lt;code class=&quot;highlighter-rouge&quot;&gt;abc&lt;/code&gt; will not be red&lt;/li&gt;
  &lt;li&gt;Fixed colorizing of complex conditions inside &lt;code class=&quot;highlighter-rouge&quot;&gt;[[&lt;/code&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;[[ &quot;$a&quot; || &quot;$b&quot; ]]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Closing &lt;code class=&quot;highlighter-rouge&quot;&gt;]]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt; are highlighted&lt;/li&gt;
  &lt;li&gt;Paths from &lt;code class=&quot;highlighter-rouge&quot;&gt;$CDPATH&lt;/code&gt; aren’t colorized unless the command is &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out full story at &lt;a href=&quot;https://github.com/zdharma/fast-syntax-highlighting&quot;&gt;Github project page&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 16:25:00 +0200</pubDate>
        <link>http://zdharma.org/posts/Fast-Syntax-Highlighting-Released</link>
        <guid isPermaLink="true">http://zdharma.org/posts/Fast-Syntax-Highlighting-Released</guid>
        
        <category>projects</category>
        
        <category>syntax-highlighting</category>
        
        <category>colorizing</category>
        
        
        <category>syntax-highlighting</category>
        
      </item>
    
      <item>
        <title>Text Editor In 30 Minutes</title>
        <description>&lt;p&gt;ZUI’s architecture has proven its value. I have only superficially tried to write a text editor in it, and it was
elevated in about 30 minutes. Multiple text-fields, one for each line of text from input file – and that’s pretty it.
Saving file is a breeze with inline-handlers:&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-zui_std_rc_button &lt;span class=&quot;s2&quot;&gt;&quot;bsave&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Save&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'internal=1; print -rl -- &quot;${lines[@]}&quot; &amp;gt; $edited_file'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The code in apostrophes will be invoked on press of the button. Creating text fields for each line of text from input
file is also easy:&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;noglob -zui_std_text_field &lt;span class=&quot;s2&quot;&gt;&quot;tfield&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; width offset lines[&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;noglob&lt;/code&gt; causes &lt;code class=&quot;highlighter-rouge&quot;&gt;line[$idx]&lt;/code&gt; to be treated as text and not as pattern. So, a hyper-link is created, with
backend-variable &lt;code class=&quot;highlighter-rouge&quot;&gt;line[&amp;lt;line-number&amp;gt;]&lt;/code&gt; – which is single entry in array to which we read the whole file.&lt;/p&gt;

&lt;p&gt;The text editor supports 1000 lines on current Zshells. I have submitted optimizations that make this 6000 lines – they
will be rolled out in next Zsh release (5.3.2). Main use case of such text-area is IMO editing of small config file in a
deploy tool, where you change only e.g. an IP, and press “Deploy” to run main task. That’s why 1000 lines is enough, and
6000 even better.&lt;/p&gt;

&lt;p&gt;Check out recorded &lt;a href=&quot;https://asciinema.org/a/107800&quot;&gt;demo&lt;/a&gt; of this text editor.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Mar 2017 15:36:00 +0100</pubDate>
        <link>http://zdharma.org/posts/Text-Editor-In-30-Minutes</link>
        <guid isPermaLink="true">http://zdharma.org/posts/Text-Editor-In-30-Minutes</guid>
        
        <category>projects</category>
        
        <category>zui</category>
        
        <category>rad</category>
        
        
        <category>zui</category>
        
      </item>
    
      <item>
        <title>ZUI release is near</title>
        <description>&lt;p&gt;I’ve implemented almost every needed feature. There were refactoring stage, final-touches stage,
even an optimization stage. I will keep on working for at least 2 weeks, to allow an afterthought
stage to happen ;). Who knows what else will get possible. Currently implemented:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;buttons,&lt;/li&gt;
  &lt;li&gt;anchors,&lt;/li&gt;
  &lt;li&gt;list-boxes,&lt;/li&gt;
  &lt;li&gt;text-fields,&lt;/li&gt;
  &lt;li&gt;toggle buttons,&lt;/li&gt;
  &lt;li&gt;timeout callback,&lt;/li&gt;
  &lt;li&gt;state serialization,&lt;/li&gt;
  &lt;li&gt;(D)HTML-like architecture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://asciinema.org/a/107691&quot;&gt;demo&lt;/a&gt; on text-fields and list-boxes. The timeout callback
is basically a timer that calls your function every N milliseconds – a
&lt;a href=&quot;https://asciinema.org/a/107688&quot;&gt;configure/make wrapper&lt;/a&gt; has been written that way. There are
endless possibilities with &lt;a href=&quot;https://github.com/zdharma/zui/wiki&quot;&gt;ZUI&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Mar 2017 20:52:00 +0100</pubDate>
        <link>http://zdharma.org/posts/ZUI-release-is-near</link>
        <guid isPermaLink="true">http://zdharma.org/posts/ZUI-release-is-near</guid>
        
        <category>projects</category>
        
        <category>zui</category>
        
        
        <category>zui</category>
        
      </item>
    
      <item>
        <title>Overview of available projects</title>
        <description>&lt;p&gt;I’ve developed 14 Zsh projects. I see five of them to be at Zdharma
mainstream, rest of the projects might get an uplift to fit into Zdharma goals
(robust and well working Zsh software) in the future, mainly by use of ZUI
curses interface library. One of the projects is a Zsh module, not a plugin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdharma/zui&quot;&gt;ZUI&lt;/a&gt; –
CGI+(D)HTML-like RAD user interface library (curses)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdharma/zconvey&quot;&gt;Zconvey&lt;/a&gt; –
send commands to other Zsh processes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdharma/history-search-multi-word&quot;&gt;history-search-multi-word&lt;/a&gt; –
multi-term history searching for Zsh&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdharma/zplugin&quot;&gt;Zplugin&lt;/a&gt; –
plugin manager with clean fpath and reports&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdharma/zgdbm&quot;&gt;zgdbm&lt;/a&gt; –
rewritten GDBM module, posted to upstream, further developed at Zdharma&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remaining good, but not yet revisited and uplifted plugins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zsh-navigation-tools&quot;&gt;Zsh Navigation Tools&lt;/a&gt; –
curses-based tools, e.g. multi-word history searcher&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zsh-editing-workbench&quot;&gt;Zsh Editing Workbench&lt;/a&gt; –
sane, sophisticated command line editing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zsh-morpho&quot;&gt;zsh-morpho&lt;/a&gt; –
terminal screen savers written in pure Zsh&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zsh-cmd-architect&quot;&gt;Zsh Command Architect&lt;/a&gt; –
build commands from what’s in history and at prompt&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/ztrace&quot;&gt;Ztrace&lt;/a&gt; –
record output of commands, reuse it via curses interface&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zsnapshot&quot;&gt;Zsnapshot&lt;/a&gt; –
zsh session restoration&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zsh-select&quot;&gt;zsh-select&lt;/a&gt; –
selection list written in pure Zsh&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zprompts&quot;&gt;zprompts&lt;/a&gt; –
independent themes for Zsh&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/psprint/zzcomplete&quot;&gt;zzcomplete&lt;/a&gt; –
a completion mechanism that uses manual pages as source&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 18:48:00 +0100</pubDate>
        <link>http://zdharma.org/posts/Overview-of-available-projects</link>
        <guid isPermaLink="true">http://zdharma.org/posts/Overview-of-available-projects</guid>
        
        <category>projects</category>
        
        
        <category>overview</category>
        
      </item>
    
      <item>
        <title>Zdharma Initiative starting up</title>
        <description>&lt;p&gt;I’ve created zdharma.org and multiple Zsh projects because the Zsh language is enough powerfull
to support sophisticated and large tasks. Main project is currently &lt;strong&gt;ZUI&lt;/strong&gt; – Zsh User Interface
library, that allows to create applications with curses interface in a manner resembling CGI+(D)HTML.
It recalls the old term “RAD” – rapid application development. Here is what is sufficient to create
hello world application:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;demo_mod1_generator&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Content, no hyper-links&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World from &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[YELLOW]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ZUI&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[COLOR_END]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;! Module &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mod&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, instance &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ice&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Non-selectable lines   Hops to jump with [ and ]   Local anchors&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;reply2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;nv&quot;&gt;reply3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;reply4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out full &lt;a href=&quot;https://github.com/zdharma/zui/blob/master/demos/zui-demo-hello-world&quot;&gt;Hello World&lt;/a&gt; example code.&lt;/p&gt;

&lt;p&gt;Other featured project is &lt;strong&gt;Zconvey&lt;/strong&gt;. It allows to send commands between Zsh sessions. Its main use
case is to switch your workflow to new project with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/github/project2
zc-all &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out Zconvey’s &lt;a href=&quot;https://github.com/zdharma/zconvey&quot;&gt;home page&lt;/a&gt; and Asciinema video there.&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Mar 2017 11:29:00 +0100</pubDate>
        <link>http://zdharma.org/posts/Zdharma-Initiative-starting-up</link>
        <guid isPermaLink="true">http://zdharma.org/posts/Zdharma-Initiative-starting-up</guid>
        
        <category>zdharma</category>
        
        
        <category>overview</category>
        
      </item>
    
  </channel>
</rss>
